
# PowerShell und der Task Scheduler
Quellen:
https://www.active-directory-faq.de/2018/06/powershell-skripte-zeitgesteuert-ausfuehren-mit-task-scheduler/
https://www.active-directory-faq.de/2018/08/tasks-per-powershell-anlegen/



-------------------------------------------------------------------------------------------------------------------------------------
Task:
Programm              Powershell.exe

Argument              -Command "&'C:\temp\TestScript.ps1'-p1'hallo'-p2'welt'"

Der Command Schalter bewirkt, dass alles Nachfolgende so ausgeführt wird, als wäre es direkt über die Kommandozeile eingegeben worden.
Ich brauche hier allerdings eine ganze Zeichenfolge, nicht nur einen einzelnen Wert.
Daher muss alles mit “& … ” umschlossen werden. Dies führt wiederum dazu, dass innerhalb der Zeichenkette Hochkommata zu verwenden sind.

Testscript.ps1:
Param(
    $p1,
    $p2
)
($p1 + " " + $p2) | Out-File "C:\temp\test.txt" -Append

-------------------------------------------------------------------------------------------------------------------------------------

# Tasks mit PowerShell beschleunigen


PowerShell Cmdlets:

# New-ScheduledTaskAction      , um anzugeben, welches Programm man ausführt
# New-ScheduledTaskPrincipal   , um den Nutzer anzugeben, unter dem der Task ausgeführt werden soll
# New-ScheduledTaskTrigger     , um festzulegen, wann etwas ausgeführt wird
# New-ScheduledTask            , um den Task zu aggregieren
# Register-ScheduledTask       , um diesen dem Task Scheduler hinzuzufügen


------------------------------------------------------------------------------------------------------

Als Skript für den obigen Anwendungsfall sieht dies beispielhaft dann so aus:

ps-Script:

# Variable für Argumentzeile im Scheduler definieren
$argument = "-Command `"& 'C:\temp\TestScript.ps1' -p1 'hallo' -p2 'Welt'`""
# Angabe welches Prgramm gestartet werden soll mit Argument Variable
$action = New-ScheduledTaskAction -Execute 'PowerShell.exe' -Argument $argument
# Variable für Auführendes Konto festlegen
$principal = New-ScheduledTaskPrincipal -UserID "NT AUTHORITY\SYSTEM" -LogonType ServiceAccount -RunLevel Highest
# Ausführungszeit in Variable festlegen
$trigger = New-ScheduledTaskTrigger -AtStartup
# Task wird aggregiert (..angelegt)
$task = New-ScheduledTask -Action $action -Principal $principal -Trigger $trigger
# Task wird im Scheduler registriert
Register-ScheduledTask "ExampleTask" -InputObject $task -Force


-------------------------------------------------------------------------------------------------------


als Invoke Command:

PS C:\Windows\system32> xcopy c:\tmp\Task.ps1     \\wsus1\c$\tmp\
C:\tmp\Task.ps1
1 Datei(en) kopiert

PS C:\Windows\system32> Invoke-Command -Computername wsus1.int.frohe-zukunft.de  -Credential wghalle\domino  -filepath "\\wsus1\c$\tmp\Task.ps1"

TaskPath                                       TaskName                          State      PSComputerName                                                            
--------                                       --------                          -----      --------------                                                            
\                                              ExampleTask                       Ready      wsus1.int.frohe-zukunft.de                                                


